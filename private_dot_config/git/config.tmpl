[core]
    editor = hx
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    autocrlf = input
    excludesFile = ~/.config/git/ignore
    hooksPath = ~/.config/git/hooks
[push]
    autoSetupRemote = true
[web]
    browser = firefox
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code-insiders --wait --diff $LOCAL $REMOTE
[alias]
    fixup = !sh -c 'git commit --fixup $@' -
    fixauto = !sh -c 'REV=$(git rev-parse $1) && git commit --fixup $@ && git rebase -i --autosquash $REV^' -
    squash = !sh -c 'git commit --squash $@' -
    squauto = !sh -c 'REV=$(git rev-parse $1) && git commit --squash $@ && git rebase -i --autosquash $REV^' -
    qf = !sh -c 'git add --all && git commit --fixup HEAD'
    qfauto = !sh -c 'REV=$(git rev-parse HEAD) && git add --all && git commit --fixup HEAD && git rebase -i --autosquash $REV^'
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = git pull --recurse-submodules
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Checkout to branch
    co = checkout
    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v
    # List aliases
    aliases = config --get-regexp alias
    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    # Delet local and remote tag
    deltag = "!f() { git tag -d $1 && git push --delete origin $1; }; f"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*\\|master\\|main\\|dev' | xargs -n 1 git branch -d"
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    # Unstage changes
    unstage = reset HEAD --
    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"
    # Show the user email for the current repository.
    whoami = config user.email
    # Create a .gitignore file
    ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
    # Create new branch with same prefix as current branch
    dup = !sh -c 'export ORG_BRANCH=$(git symbolic-ref --short HEAD) && git checkout -b $ORG_BRANCH-$1' -
    # Rebase current branch from master
    remaster = "!git fetch origin master && git rebase origin/master"
    # Rebase current branch from main
    remain = "!git fetch origin main && git rebase origin/main"
[init]
    defaultBranch = main
[user]
    email = {{ .email | quote }}
    name =  {{ .gituser | quote }}
{{- if eq .chezmoi.hostname "clawfinger" }}
    signkey = {{ .gitsignkey | quote }}
[commit]
    gpgsign = true
[core]
    pager = delta
[interactive]
    diffFilter = delta --color-only
[add.interactive]
    useBuiltin = false # required for git 2.37.0
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
[merge]
    conflictstyle = diff3
[diff]
    colorMoved = default
[safe]
    directory = /opt/flutter
    directory = /etc/nixos
{{- end }}
[github]
    user = {{ .githubuser | quote }}
{{- if eq .chezmoi.hostname "clawfinger" }}
{{- end }}
[credential]
    helper = libsecret
[ghq]
    vcs = git
    root = ~/Workspaces
